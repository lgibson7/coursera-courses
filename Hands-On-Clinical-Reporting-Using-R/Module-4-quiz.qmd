---
title: "Module-4-Quiz"
format: html
---

```{r}
#-------------------------------------------------------------#
# Install packages needed for the Module Quiz
#-------------------------------------------------------------#

# install.packages("stringr") #This package installed first in order to use devtools
# install.packages("devtools") #Needs stringr package installed first

# Load packages above
library("stringr")
library("devtools") # This package is needed for the install_version() function

```



```{r}

# Install packages needed to run the code for the quiz, below. 

# NOTE : If you get this message, ignore and skip the updates:
#-------------------------------------------------------------#
# These packages have more recent versions available.
# It is recommended to update all of them.
# Which would you like to update?
#-------------------------------------------------------------#
# install_version("admiral", version = "0.12.2", repos = "http://cran.us.r-project.org")
# install_version("dplyr", version = "1.1.3", repos = "http://cran.us.r-project.org")
# install_version("haven", version = "2.5.3", repos = "http://cran.us.r-project.org")
# install_version("lubridate", version = "1.9.3", repos = "http://cran.us.r-project.org")
# install_version("metacore", version = "0.1.2", repos = "http://cran.us.r-project.org")
# install_version("metatools", version = "0.1.5", repos = "http://cran.us.r-project.org")
# install_version("pharmaversesdtm", version = "0.1.1", repos = "http://cran.us.r-project.org")
# install_version("pharmaverseadam", version = "0.1.1", repos = "http://cran.us.r-project.org")
# install_version("tibble", version = "3.2.1", repos = "http://cran.us.r-project.org")
# install_version("tidyr", version = "1.3.0", repos = "http://cran.us.r-project.org")
# install_version("xportr", version = "0.3.1", repos = "http://cran.us.r-project.org")


library(admiral)
library(dplyr)
library(haven)
library(lubridate)
library(metacore)
library(metatools)
library(pharmaverseadam)
library(pharmaversesdtm)
library(tibble)
library(tidyr)
# library(xportr)
```


## Question 2
You want to derive TRTSDTM (Datetime of First Exposure to Treatment) for your ADSL dataset. Example code is shown below:
```{r}

ex_ext <- ex %>%
 derive_vars_dtm(
 dtc = EXSTDTC,
 new_vars_prefix = "EXST"
 )

# If you wanted to impute missing time to 23:59:59 to represent the end of the day, what value would you input for the time_imputation parameter?
```

If you wanted to impute missing time to 23:59:59 to represent the end of the day, what value would you input for the time_imputation parameter?

## Question 3
If analysis needs require a derived age that does not match DM.AGE, then ADSL.AAGE (Age (Unit) at Baseline) must be added. ADMIRAL contains a function called derive_vars_aage() to calculate AAGE. By default, the function’s arguments are set to calculate the patient's age (years) at randomization.

For your analysis needs, it is determined that the patient's age (months) at initiation of study treatment is required. Using the example ADSL dataset from the admiral package and creating a mock Imputed Birth Date (BRTHDT) using January 1, 2024:

```{r}
# library(admiral)
# library(lubridate)

data("admiral_adsl")
adsl <- admiral_adsl

adsl$BRTHDT <-as.Date("2024-01-01") %m-% years(adsl$AGE)
```

compute the AAGE as per the requirements. Once computed, please provide the AAGE (in months) for patient 01-701-1015.

```{r}
derive_vars_aage(
  adsl,
  start_date = BRTHDT,
  end_date = RANDDT,
  age_unit = "months",
  type = "interval"
)
```

## Question 4
The goal of metatools is to enable the use of metacore objects. Metatools can be used to build datasets or enhance columns in existing datasets as well as checking datasets against the metadata in metacore.  If you recall, a metacore object is an R object that can hold necessary metadata in a standardized, immutable structure (using R6) that makes it easy to extract out necessary information when needed. A metacore object can be created using pre-existing functions or derived from the analysis specifications in the Pinnacle 21 format.

We covered many useful QC checks from the metatools package, which includes:

```{r eval=FALSE}
drop_unspec_vars(metacore) # Drop unspecified variables from specs

check_variables(metacore) # Check all variables specified are present and no more                                

check_ct_data(metacore)  # Checks all variables with CT only contain values within the CT

order_cols(metacore) # Orders the columns according to the spec

sort_by_key(metacore) # Sorts the rows by the sort keys
```

Given the example metacore object below:

```{r}
# library(metatools)
# library(metacore)
# library(dplyr)

# Load example datasets

load(metacore_example("pilot_ADaM.rda"))

metacore <- metacore %>%
  select_dataset("ADSL")

adsl <- read_xpt(metatools_example("adsl.xpt"))

# Apply metadata and perform associated checks 
# uses {metatools} 

adsl <- adsl %>%
  drop_unspec_vars(metacore) %>% # Drop unspecified variables from specs
  check_variables(metacore) %>% # Check all variables specified are present and no more
  check_ct_data(metacore) %>% # Checks all variables with CT only contain values within the CT
  order_cols(metacore) %>% # Orders the columns according to the spec
  sort_by_key(metacore) # Sorts the rows by the sort keys
```

What sort keys are used by the sort_by_key() function?

## Question 5
From the previous question, the metacore object can be viewed by executing the following code:

```{r eval=FALSE}
View(metacore)
```

You will see various tables within the metacore object. If you have an ADSL dataset with the following columns: 

DCSREAS, RFSTDTC, RFENDT, RFENDTC, HEIGHTBL

and you use the order_cols() from the metatools package on this dataset, what sequence would these variables appear from left to right?

```{r}
order_cols(adsl, metacore)
```


## Question 6
xportr was created to help get your xpt files ready for transport either to a clinical data set validator application or to a regulatory agency. This package has the functionality to associate metadata information to a local R data frame, perform data set level validation checks and convert into a transport v5 file(xpt).

See example code below demonstrating usage of xportr:

```{r}
# library(dplyr)
# library(xportr)

# Export ADSL in a submission-ready format
# uses {xportr}
  
adsl_xpt <-   adsl %>%
  xportr_label(metacore) %>% # Assigns variable label from metacore specifications
  xportr_df_label(metacore, domain = "ADSL") %>% # Assigns dataset label from metacore specifications
  xportr_type(metacore) %>% # Coerce variable type to match spec
  xportr_length(metacore) %>% # Assigns SAS length from a variable level metadata
  xportr_format(metacore) %>% # Assigns variable format from metacore specifications
  xportr_write("adsl.xpt") # Write xpt v5 transport file
```

As shown in the example code above, xportr_label() is a function that assigns variable labels from the metacore specifications. What metacore table does xportr_label() use to obtain these variable labels?



## Question 9
Population flags are very useful in ADSL to group certain groups of subjects together for downstream analysis.  Since the populations flags are mainly company/study specific, no dedicated functions are provided, but in most cases they can easily be derived using derive_var_merged_exist_flag.  In Video: Part 3 - ADSL demo of Lesson 3:  Putting in all together, we demonstrate how to derive the safety population flag (SAFFL).

Another useful population flag is the Intent-To-Treat Population Flag (ITTFL), which is used to group subjects based on the initial treatment assignment. Given the starting code below:

```{r}
# library(admiral)

data("admiral_adsl")
data("ds")

ds <- convert_blanks_to_na(ds)
```

derive the Intent-To-Treat Population Flag (ITTFL) using this logic:  Set to "Y" if patients Randomization Date: Start Date/Time of Disposition Event [DS.DSSTDTC] not equal to missing for a randomized study where Standardized Disposition Term [DS.DSDECOD] = 'RANDOMIZED'.

Based on your output, how many patients belong to the Intent-To-Treat Population?

```{r}

```


## Question 10

ADVS (Vital Signs Analysis Dataset) is an example of a BDS dataset which was covered in Lesson 1. One unique aspect of BDS datasets is that records can be derived based on calculations of observed values. An example of this would be creating a new row to calculate BMI based on a patient’s weight and height.

For this question, you are tasked with deriving pulse pressure in your ADVS dataset. Pulse pressure is calculated as the difference between the systolic blood pressure and the diastolic blood pressure. 

Given the example ADVS dataset below:

```{r}
# library(pharmaverseadam)

admiral_advs <- pharmaverseadam::advs

#Remove duplicate rows

admiral_advs <- admiral_advs %>% 
    distinct(USUBJID, VISIT, PARAMCD, ATPT, .keep_all = TRUE)
```


compute the pulse pressure using the derive_param_computed() ADMIRAL function for each patient per Visit Name (VISIT) and Analysis Timepoint (ATPT). You can choose an appropriate PARAMCD and PARAM argument to use.

What is the pulse pressure (do not round and include all significant digits) for patient 01-701-1015 at the SCREENING 1 visit with an analysis time point of “AFTER LYING DOWN FOR 5 MINUTES”?

```{r}

```

